# Несколько полезных функций
# В этой главе рассмотрим несколько полезных функций, которые сделают ваше
# приложение лучше.
# Обработка ошибок
# Что будет, если пользователь перешёл на несуществующую страницу? Если ничего
# не предпринимать, получим следующий вывод:
# Not Found
# The requested URL was not found on the server. If you entered the URL manually
# please check your spelling and try again.
# Декоратор errorhandler
# Flask предоставляет возможности для обработки ошибок и способен заменить
# стандартный текст на симпатичную страницу в стиле вашего сайта.
# Обработка ошибок в Flask происходит с помощью декоратора errorhandler(). Этот
# декоратор позволяет определить функцию-обработчик ошибок, которая будет
# вызываться в случае возникновения ошибки в приложении.
# Например, чтобы обработать ошибку 404 (страница не найдена), необходимо
# определить функцию, которая будет вызываться при возникновении этой ошибки:
import logging
from flask import Flask, render_template, request

app = Flask(__name__)
logger = logging.getLogger(__name__)


@app.route('/')
def index():
    return '<h1>Hello world!</h1>'


@app.errorhandler(404)
def page_not_found(e):
    logger.warning(e)
    context = {
        'title': 'Страница не найдена',
        'url': request.base_url,
    }
    return render_template('404.html', **context), 404


if __name__ == '__main__':
    app.run(debug=True)
# В этом примере мы определяем функцию page_not_found(), которая будет
# вызываться при ошибке 404. Функция возвращает шаблон HTML страницы 404 и
# код ошибки 404. Обратите внимание, что в переменную e попадает текст той самой
# ошибки о “Not Found…”. Её мы выводим в логи как предупреждение.
# В качестве контекста пробрасываем в шаблон заголовок страницы и адрес, по
# которому пытался перейти пользователь. Свойство base_url у объекта request
# возвращает тот адрес, который видит пользователь в адресной строке браузера.
# Что касается шаблона, возьмём базовый из прошлой лекции.
# Шаблон base.html
